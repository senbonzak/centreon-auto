#!/usr/bin/env python3
"""
Script de d√©marrage du dashboard Centreon
G√®re le d√©marrage du serveur web et les t√¢ches de monitoring
"""

import os
import sys
import subprocess
import time
import signal
import argparse
from multiprocessing import Process
from datetime import datetime

def run_dashboard():
    """Lance le serveur dashboard Flask"""
    print("üöÄ D√©marrage du dashboard web...")
    try:
        from dashboard import app, socketio
        
        debug_mode = os.getenv('FLASK_DEBUG', 'False').lower() == 'true'
        port = int(os.getenv('FLASK_PORT', 5000))
        
        print(f"üì± Dashboard accessible sur: http://localhost:{port}")
        print(f"üîß Mode debug: {'Activ√©' if debug_mode else 'D√©sactiv√©'}")
        
        socketio.run(app, debug=debug_mode, host='0.0.0.0', port=port)
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("Assurez-vous que Flask et les d√©pendances sont install√©es:")
        print("pip install -r requirements.txt")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage du dashboard: {e}")
        sys.exit(1)

def run_monitoring_script():
    """Lance le script de monitoring p√©riodiquement"""
    print("üìä D√©marrage du monitoring automatique...")
    
    monitoring_script = os.path.join(os.path.dirname(__file__), 'scripts', 'monitoring.py')
    if not os.path.exists(monitoring_script):
        print(f"‚ùå Script de monitoring non trouv√©: {monitoring_script}")
        return
    
    interval = int(os.getenv('MONITORING_INTERVAL', 300))  # 5 minutes par d√©faut
    print(f"‚è∞ Intervalle de monitoring: {interval} secondes")
    
    while True:
        try:
            print(f"üîç Ex√©cution du script de monitoring - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Ex√©cuter le script de monitoring
            result = subprocess.run([
                sys.executable, monitoring_script
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ Script de monitoring ex√©cut√© avec succ√®s")
                if result.stdout:
                    print("üìÑ Sortie:", result.stdout[-200:])  # Derni√®res 200 caract√®res
            else:
                print(f"‚ö†Ô∏è Le script de monitoring a termin√© avec le code: {result.returncode}")
                if result.stderr:
                    print("‚ùå Erreur:", result.stderr[-200:])
            
        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout du script de monitoring (5 minutes)")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution du monitoring: {e}")
        
        print(f"‚è∏Ô∏è Attente {interval} secondes avant la prochaine ex√©cution...")
        time.sleep(interval)

def setup_database():
    """Initialise la base de donn√©es"""
    print("üóÑÔ∏è Initialisation de la base de donn√©es...")
    try:
        from dashboard import app, db
        
        with app.app_context():
            db.create_all()
            print("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base: {e}")
        sys.exit(1)

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    required_packages = [
        'flask', 'flask_sqlalchemy', 'flask_socketio', 
        'requests', 'python-dotenv'
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå Paquets manquants:")
        for pkg in missing_packages:
            print(f"   - {pkg}")
        print("\nInstallez les d√©pendances avec:")
        print("pip install -r requirements.txt")
        sys.exit(1)
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")

def signal_handler(signum, frame):
    """Gestionnaire de signaux pour arr√™t propre"""
    print("\nüõë Arr√™t du dashboard demand√©...")
    sys.exit(0)

def main():
    parser = argparse.ArgumentParser(description="Dashboard Centreon Auto-Acknowledge")
    parser.add_argument('--mode', choices=['dashboard', 'monitoring', 'full'], 
                       default='full', help='Mode de fonctionnement')
    parser.add_argument('--setup-db', action='store_true', 
                       help='Initialiser uniquement la base de donn√©es')
    parser.add_argument('--check-deps', action='store_true',
                       help='V√©rifier les d√©pendances uniquement')
    
    args = parser.parse_args()
    
    # Gestionnaire de signaux
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("=" * 60)
    print("üéØ DASHBOARD CENTREON AUTO-ACKNOWLEDGE")
    print("=" * 60)
    
    # V√©rifications pr√©liminaires
    if args.check_deps:
        check_dependencies()
        return
    
    check_dependencies()
    
    if args.setup_db:
        setup_database()
        return
    
    # Initialiser la base de donn√©es au premier d√©marrage
    setup_database()
    
    try:
        if args.mode == 'dashboard':
            # Mode dashboard uniquement
            run_dashboard()
            
        elif args.mode == 'monitoring':
            # Mode monitoring uniquement
            run_monitoring_script()
            
        elif args.mode == 'full':
            # Mode complet avec dashboard et monitoring
            print("üöÄ D√©marrage en mode complet...")
            
            # Cr√©er les processus
            dashboard_process = Process(target=run_dashboard, name="Dashboard")
            monitoring_process = Process(target=run_monitoring_script, name="Monitoring")
            
            # D√©marrer les processus
            dashboard_process.start()
            monitoring_process.start()
            
            print("‚úÖ Dashboard et monitoring d√©marr√©s")
            print("üì± Acc√©dez au dashboard sur: http://localhost:5000")
            print("üîç Le monitoring s'ex√©cute automatiquement")
            print("üí° Appuyez sur Ctrl+C pour arr√™ter")
            
            try:
                # Attendre que les processus se terminent
                dashboard_process.join()
                monitoring_process.join()
            except KeyboardInterrupt:
                print("\nüõë Arr√™t des services...")
                dashboard_process.terminate()
                monitoring_process.terminate()
                dashboard_process.join(timeout=10)
                monitoring_process.join(timeout=10)
                
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        sys.exit(1)
    
    print("üëã Dashboard arr√™t√© proprement")

if __name__ == "__main__":
    main()
